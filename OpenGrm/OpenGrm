<!DOCTYPE html>
<html>
<head>
<title>MathJax TeX Test Page</title>
</head>
<body>

<textarea id="text-input" oninput="this.editor.update()" rows="6" cols="60">


INSTALL
=======
OpenFst
-------
First we need to install OpenFst

    cd ~/software/openfst/openfst-1.3.3
    ./configure --enable-far --prefix=/usr/lib
    sudo make
    sudo make install

Then I try to compile a test.cpp  

    #include <fst/fstlib.h>
    #include<fst/fst-decl.h>
    using namespace fst;
    int main() {
    // A vector FST is a general mutable FST 
    StdVectorFst fst;

    // Adds state 0 to the initially empty FST and make it the start state. 
    fst.AddState();   // 1st state will be state 0 (returned by AddState) 
    fst.SetStart(0);  // arg is state ID

    // Adds two arcs exiting state 0.
    // Arc constructor args: ilabel, olabel, weight, dest state ID. 
    fst.AddArc(0, StdArc(1, 1, 0.5, 1));  // 1st arg is src state ID 
    fst.AddArc(0, StdArc(2, 2, 1.5, 1)); 

    // Adds state 1 and its arc. 
    fst.AddState();
    fst.AddArc(1, StdArc(3, 3, 2.5, 2));

    // Adds state 2 and set its final weight. 
    fst.AddState();
    fst.SetFinal(2, 3.5);  // 1st arg is state ID, 2nd arg weight

    fst.Write("firstFst"); 
    }

    g++ test.cpp -I/usr/local/include -L/usr/local/lib -lfst -ldl -o test

Add `LD_LIBRARY_PATH` (or equivalent) to contain `/usr/local/lib`.

OpenGrm
-------
Installed with no problem.

Graphviz
--------
We need the dot the paint the WFST

        sudo apt-get install graphviz

OpenFst version:1.3.3  
=====================
Generate the binary FST
-----------------------

        # arc format: src dest ilabel olabel [weight]
        # final state format: state [weight]
        # lines may occur in any order except initial state must be first line
        # unspecified weights default to 0.0 (for the library-default Weight type) 
        $ cat >text.fst <<EOF
        0 1 a x .5
        0 1 b y 1.5
        1 2 c z 2.5
        2 3.5
        EOF

The internal representation of an arc label is an integer. We must provide the mapping from symbols to integers explicitly with a symbol table file, also in AT&T format:

        $ cat >isyms.txt <<EOF
        <eps> 0
        a 1
        b 2
        c 3
        EOF

        $ cat >osyms.txt <<EOF
        <eps> 0
        x 1
        y 2
        z 3
        EOF

**notice** The zero label ID is reserved for the epsilon label.

        # Creates binary Fst from text file. 
        # The symbolic labels will be converted into integers using the symbol table files. 
        $ fstcompile --isymbols=isyms.txt --osymbols=osyms.txt text.fst binary.fst

        # As above but the symbol tables are stored with the FST. 
        $ fstcompile --isymbols=isyms.txt --osymbols=osyms.txt --keep_isymbols --keep_osymbols text.fst binary.fst

Here I use the second command.  
The following command will print out an FST in AT&T text format(this command will give us the original `text.fst`:

        # Print FST using symbol table files. 
        $ fstprint --isymbols=isyms.txt --osymbols=osyms.txt binary.fst text.fst


        # Draw FST using symbol table files and Graphviz dot: 
        $ fstdraw --isymbols=isyms.txt --osymbols=osyms.txt binary.fst binary.dot
        $ dot -Tps binary.dot >binary.ps

Draw the FST
------------

        # Draw FST using symbol table files and Graphviz dot: 
        $ fstdraw --isymbols=isyms.txt --osymbols=osyms.txt binary.fst binary.dot
        $ dot -Tps binary.dot >binary.ps

To open the file in **shell** you can use `xdg-open binary.ps`.

![example-picture](./images/1.png "output ps")

FST weight type
----------
The flag `--arc_type` supports the same arc types --- standard (tropical), log and log64 --- as in the OpenFst library. For most purposes you will want the default tropical semiring, so you should probably not use this flag too often. Note that `thraxrewrite-tester` will only work if the grammar has been compiled with standard arcs.  
For example:  

        fstcompile --isymbols=isyms.txt --osymbols=osyms.txt --keep_isymbols --keep_osymbols --arc_type=log text.fst binary.fst 

        fstinfo binary.fst 
        fst type                                          vector
        arc type                                          log
        ...

You see the arc type becomes log.

Determinize
-----------
This operation determinizes a weighted transducer. The result will be an equivalent FST that has the property that no state has two transitions with the same input label.   
The transducer must be **functional**(this is important). The weights must be **(weakly) left divisible** (valid for TropicalWeight and LogWeight for instance) and **zero-sum-free**.  
        
        fstdeterminize a.fst out.fst


OpenGrm
=======
Corpus I/O
----------
Text corpora are represented as **binary finite-state archives**, with one automaton per sentence. This provides efficient later processing by the NGram Library utilities and allows if desired more general probabilistic input (e.g. weighted DAGs or lattices).

The first step is to generate an OpenFst-style symbol table for the text tokens in input corpus. This can be done with the command-line utility ngramsymbols. For example, the symbols in the text of Oscar Wilde's Importance of Being Earnest, using the suitably normalized copy found here, can be extracted with:
        
        $ ngramsymbols <earnest.txt >earnest.syms

which is of the format:

        <epsilon>   0
        MORNING 1
        ROOM    2
        IN  3
        ALGERNON    4
        ....
        <unk>   2305

Given a symbol table, a text corpus can be converted to a binary FAR archive with:
        
        $ farcompilestrings -symbols=earnest.syms -keep_symbols=1 earnest.txt >earnest.far

Let's see what's in the `earnest.fat`.  
`farextract` can extract fsts from `far`.  

        farextract earnest.far 

What I get is as follow, apparently, every sentence is put into a fst:

![example-picture](./images/2.png "a lot of fsts")

I try to draw one of them, and get a sentence indeed:

        fstdraw --isymbols=earnest.syms --osymbols=earnest.syms earnest.txt-0418 earnest.txt-0418.dot

![example-picture](./images/3.png "a sentence fst")

</textarea>



<div id="preview"> </div>

<script type="text/x-mathjax-config">
  MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}});
</script>
<script type="text/javascript" src="../lib/MathJax-master/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>
<!--
<script type="text/javascript"
   src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
-->

<script src="../lib/markdown-js/markdown.js"></script>
<script>
  function Editor(input, preview) {
    this.update = function () {
      preview.innerHTML = markdown.toHTML(input.value);
    };
    input.editor = this;
    this.update();
  }
  var $ = function (id) { return document.getElementById(id); };
  new Editor($("text-input"), $("preview"));
</script>


</body>
</html>
