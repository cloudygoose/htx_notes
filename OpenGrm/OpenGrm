<!DOCTYPE html>
<html>
<head>
<title>MathJax TeX Test Page</title>
</head>
<body>

<textarea id="text-input" oninput="this.editor.update()" rows="6" cols="60">


INSTALL
=======
OpenFst
-------
First we need to install OpenFst

    cd ~/software/openfst/openfst-1.3.3
    ./configure --enable-far --prefix=/usr/lib
    sudo make
    sudo make install

Then I try to compile a test.cpp  

    #include <fst/fstlib.h>
    #include<fst/fst-decl.h>
    using namespace fst;
    int main() {
    // A vector FST is a general mutable FST 
    StdVectorFst fst;

    // Adds state 0 to the initially empty FST and make it the start state. 
    fst.AddState();   // 1st state will be state 0 (returned by AddState) 
    fst.SetStart(0);  // arg is state ID

    // Adds two arcs exiting state 0.
    // Arc constructor args: ilabel, olabel, weight, dest state ID. 
    fst.AddArc(0, StdArc(1, 1, 0.5, 1));  // 1st arg is src state ID 
    fst.AddArc(0, StdArc(2, 2, 1.5, 1)); 

    // Adds state 1 and its arc. 
    fst.AddState();
    fst.AddArc(1, StdArc(3, 3, 2.5, 2));

    // Adds state 2 and set its final weight. 
    fst.AddState();
    fst.SetFinal(2, 3.5);  // 1st arg is state ID, 2nd arg weight

    fst.Write("firstFst"); 
    }

    g++ test.cpp -I/usr/local/include -L/usr/local/lib -lfst -ldl -o test

Add `LD_LIBRARY_PATH` (or equivalent) to contain `/usr/local/lib`.

OpenGrm
-------
If you `make install` the OpenFst, Installed with no problem.  
If you don't `make install` the OpenFst,  
Something needs to be changed with OpenGrm installation.  

        ./configure CXXFLAGS=-I/home/cloudygoose/software/openfst/openfst-1.3.3/src/include/ 

        export LD_LIBRARY_PATH=/home/cloudygoose/software/openfst/openfst-1.3.3/src/extensions/far/.libs:/home/cloudygoose/software/openfst/openfst-1.3.3/src/lib/.libs:

or

        ./configure CXXFLAGS=-I/home/cloudygoose/software/openfst/openfst-1.3.3/src/include/ LDFLAGS="-L/home/cloudygoose/software/openfst/openfst-1.3.3/src/extensions/far/.libs -L/home/cloudygoose/software/openfst/openfst-1.3.3/src/lib/.libs"
        
and then

        make

Graphviz
--------
We need the dot the paint the WFST

        sudo apt-get install graphviz

OpenFst version:1.3.3  
=====================
Generate the binary FST
-----------------------

        # arc format: src dest ilabel olabel [weight]
        # final state format: state [weight]
        # lines may occur in any order except initial state must be first line
        # unspecified weights default to 0.0 (for the library-default Weight type) 
        $ cat >text.fst <<EOF
        0 1 a x .5
        0 1 b y 1.5
        1 2 c z 2.5
        2 3.5
        EOF

The internal representation of an arc label is an integer. We must provide the mapping from symbols to integers explicitly with a symbol table file, also in AT&T format:

        $ cat >isyms.txt <<EOF
        <eps> 0
        a 1
        b 2
        c 3
        EOF

        $ cat >osyms.txt <<EOF
        <eps> 0
        x 1
        y 2
        z 3
        EOF

**notice** The zero label ID is reserved for the epsilon label.

        # Creates binary Fst from text file. 
        # The symbolic labels will be converted into integers using the symbol table files. 
        $ fstcompile --isymbols=isyms.txt --osymbols=osyms.txt text.fst binary.fst

        # As above but the symbol tables are stored with the FST. 
        $ fstcompile --isymbols=isyms.txt --osymbols=osyms.txt --keep_isymbols --keep_osymbols text.fst binary.fst

Here I use the second command.  
The following command will print out an FST in AT&T text format(this command will give us the original `text.fst`:

        # Print FST using symbol table files. 
        $ fstprint --isymbols=isyms.txt --osymbols=osyms.txt binary.fst text.fst


        # Draw FST using symbol table files and Graphviz dot: 
        $ fstdraw --isymbols=isyms.txt --osymbols=osyms.txt binary.fst binary.dot
        $ dot -Tps binary.dot >binary.ps

Draw the FST
------------

        # Draw FST using symbol table files and Graphviz dot: 
        $ fstdraw --isymbols=isyms.txt --osymbols=osyms.txt binary.fst binary.dot
        $ dot -Tps binary.dot >binary.ps

To open the file in **shell** you can use `xdg-open binary.ps`.

![example-picture](./images/1.png "output ps")

FST weight type
----------
The flag `--arc_type` supports the same arc types --- standard (tropical), log and log64 --- as in the OpenFst library. For most purposes you will want the default tropical semiring, so you should probably not use this flag too often. Note that `thraxrewrite-tester` will only work if the grammar has been compiled with standard arcs.  
For example:  

        fstcompile --isymbols=isyms.txt --osymbols=osyms.txt --keep_isymbols --keep_osymbols --arc_type=log text.fst binary.fst 

        fstinfo binary.fst 
        fst type                                          vector
        arc type                                          log
        ...

You see the arc type becomes log.

Determinize
-----------
This operation determinizes a weighted transducer. The result will be an equivalent FST that has the property that no state has two transitions with the same input label.   
The transducer must be **functional**(this is important). The weights must be **(weakly) left divisible** (valid for TropicalWeight and LogWeight for instance) and **zero-sum-free**.  
        
        fstdeterminize a.fst out.fst


OpenGrm
=======
Corpus I/O
----------
Text corpora are represented as **binary finite-state archives**, with one automaton per sentence. This provides efficient later processing by the NGram Library utilities and allows if desired more general probabilistic input (e.g. weighted DAGs or lattices).

The first step is to generate an OpenFst-style symbol table for the text tokens in input corpus. This can be done with the command-line utility ngramsymbols. For example, the symbols in the text of Oscar Wilde's Importance of Being Earnest, using the suitably normalized copy found here, can be extracted with:
        
        $ ngramsymbols <earnest.txt >earnest.syms

which is of the format:

        <epsilon>   0
        MORNING 1
        ROOM    2
        IN  ALGERNON
        3    4
        ....
        <unk>   2305
            
The `earnest.txt` is in the format,**there is no <S></s>**:

        MORNING ROOM IN ALGERNON S FLAT IN HALF MOON STREET
        THE ROOM IS LUXURIOUSLY AND ARTISTICALLY FURNISHED
        THE SOUND OF A PIANO IS HEARD IN THE ADJOINING ROOM
        DID YOU HEAR WHAT I WAS PLAYING LANE
        I DIDN T THINK IT POLITE TO LISTEN SIR
        I M SORRY FOR THAT FOR YOUR SAKE
        I DON T PLAY ACCURATELY ANY ONE CAN PLAY ACCURATELY BUT I PLAY WITH WONDERFUL EXPRESSION
        AS FAR AS THE PIANO IS CONCERNED SENTIMENT IS MY FORTE
        I KEEP SCIENCE FOR LIFE

Given a symbol table, a text corpus can be converted to a binary FAR archive with:
        
        $ farcompilestrings -symbols=earnest.syms -keep_symbols=1 earnest.txt >earnest.far

Let's see what's in the `earnest.fat`.  
`farextract` can extract fsts from `far`.  

        farextract earnest.far 

What I get is as follow, apparently, every sentence is put into a fst:

![example-picture](./images/2.png "a lot of fsts")

I try to draw one of them, and get a sentence from the text indeed:

        fstdraw --isymbols=earnest.syms --osymbols=earnest.syms earnest.txt-0418 earnest.txt-0418.dot

![-picture](./images/3.png "a sentence fst")

**The above process could also be applied to Chinese.**  

N-gram Counting
---------------

We count using the `ngramcount`.

        $ ngramcount -order=5 earnest.far >earnest.cnts

The `.cnts` file is in the openfst binary file format. We can examine it using the `fstdraw`.  
To explore the cnt fst, I use this simple txt and count with order = 1 and order = 2 and order = 3.  
The document says **Transitions and final costs are weighted with the negative log count of the associated n-gram. The log means ln**

        Goose hehe hehe
        hehe hehe

And we could use `fst info`, it's on tropical.

        fstinfo test.cnts
        fst type                                          vector
        arc type                                          standard

So it's on a tropical semiring.


![-picture](./images/6.png "order=1")  
order=1

We have math.e^1.3863=4.000022555584032 and math.e^0=1, so for order one it makes sense.  

![-picture](./images/4.png "order=2")  
order=2

This is interesting: when we want to get count(hehe), we just go from 0 to 3. When we want to get count(Goose hehe), we go from 0 to 2 to 3. to get count(hehe hehe), go from 0 to 3 to 3, only the last transition is useful.

![-picture](./images/5.png "order=3")  
order=3

Here is only 3-gram is `Goose hehe hehe`.

        ngrammake --method=kneser_ney earnest.cnts > earnest-kn.mod
        ngrammake --method=kneser_ney --backoff=true earnest.cnts > earnest-kn-backoff.mod

We could use `ngramprint` to turn the ngram-model to ARPA format, which we can use to in the SRILM lib.  
From the results of the two commands above we know **the backoffed and unbackoffed knersey_ney's estimated ngram-model are different**.

        $ ngramprint --ARPA earnest.mod >earnest.ARPA
        $ head -15 earnest.ARPA
        \data\
        ngram 1=2306
        ngram 2=10319
        ngram 3=14796
        ngram 4=15218
        ngram 5=14170

        \1-grams:
        -99   <s>   -0.9399067
        -1.064551   </s>
        -3.337681   MORNING   -0.3590219

Calculate PPL
-------------

The `ngramread` can read a ARPA format into binary fst

        $ ngramread --ARPA earnest.ARPA >earnest.mod

The `ngramperplexity` can be used to calculate ppl

        echo -e "A HAND BAG\nBAG HAND A" |\
            farcompilestrings -generate_keys=1 -symbols=earnest.syms --keep_symbols=1 |\
            ngramperplexity --v=1 earnest.mod -
        A HAND BAG
                                                        ngram  -logprob
                N-gram probability                      found  (base10)
                p( A | <s> )                         = [2gram]  1.87984
                p( HAND | A ...)                     = [2gram]  2.56724
                p( BAG | HAND ...)                   = [3gram]  0.0457417
                p( </s> | BAG ...)                   = [4gram]  0.507622
        1 sentences, 3 words, 0 OOVs
        logprob(base 10)= -5.00044;  perplexity (base 10)= 17.7873

        BAG HAND A
                                                        ngram  -logprob
                N-gram probability                      found  (base10)
                p( BAG | <s> )                       = [1gram]  4.02771
                p( HAND | BAG ...)                   = [1gram]  3.35968
                p( A | HAND ...)                     = [1gram]  2.51843
                p( </s> | A ...)                     = [1gram]  1.53325
        1 sentences, 3 words, 0 OOVs
        logprob(base 10)= -11.4391;  perplexity (base 10)= 724.048

        2 sentences, 6 words, 0 OOVs
        logprob(base 10)= -16.4395;  perplexity (base 10)= 113.485

However, just `farcompilestrings` can't deal with an unknown symbol 

        echo "A HAND BAG AAAA" |\
            farcompilestrings -generate_keys=1 -symbols=earnest.syms --keep_symbols=1 |\
            ngramperplexity --v=1 earnest-kn.mod 
        FATAL: FarCompileStrings: compiling string number 1 in file  failed with token_type = symbol and entry_type = line
        FATAL: STListReader: error reading file: stdin

Look at -help ,we need to add the `--unknown_symbol="<unk>"` to farcompilestrings. The unk will be regarded as OOV in ngramperplexity in OpenGrm.

If I use the train data as the test data, the PPL result(**computed by OpenGrm**) is:

        1688 sentences, 17897 words, 0 OOVs
        logprob(base 10)= -16415.5;  perplexity = 6.88913


For PPL, I tried to use SRILM to calculate the same PPL(**computed by SRILM**)

        ngram -order 5 -debug 1 -lm earnest-kn.ARPA -ppl earnest-SRILM.txt > earnest-ppl
        file earnest-SRILM.txt: 1688 sentences, 17897 words, 0 OOVs
        0 zeroprobs, logprob= -16415.5 ppl= 6.88913 ppl1= 8.26453

So the two libraries use the same formula to calculate PPL.

OPENGRM's Experiments
=====================
In order to use Kai's weibo Data(the same we use in SRLM) in OpenGrm, we need first to eliminate the <s></s> in the weibo.dat

        cat weibo.dat | awk '{ for (k=2; k < NF - 1; k++) printf("%s ", $k); if (NF > 2) print $(NF-1) }' > weibo-opengrm.dat

The next table is the cost of each command runned on `markov` for `weibo.dat`

File lines and time&space

$$
  \left[\begin{array}{r|r|r|r}
    files & lines\\\\
    weibo-opengrm-order-3-kn-backoff.ARPA & 215,893,256 \\\\
    weibo-opengrm-order-3-kn.ARPA & 215,893,256 \\\\
    weibo-opengrm-order-3-kn-prune-1.0e-7.ARPA & 6548827 \\\\
    weibo-opengrm-order-3-kn-backoff-prune-1.0e-7.ARPA & 5886043 \\\\
  \end{array}\right]
$$

At first I was surprised that SRILM's lines is much smaller than OpenGrm's. When we tried `-gt1min 1 -gt2min 1 -gt3min 1` in SRILM's ngram-count, I found that SRILM's `3-kn-inter-gtall1` now has 208,216,095 lines, I have

        head weibo-kn-gtall1(SRILM)
        \data\
        ngram 1=50002
        ngram 2=31781329
        ngram 3=176384751

        head weibo-opengrm-order-3-kn.ARPA(OPENGRM)
        \data\
        ngram 1=63137
        ngram 2=33406565
        ngram 3=182423541


$$
  \left[\begin{array}{r|r|r|r}
    command & time & space \\\\
    ngrammake-order-3 & 88min & 2.6\%,6.5G \\\\
    ngramperplexity & 9min34s & 2.6\%,6.5G \\\\
    ngramshrink1.0e-7 & 27m24s & 2.6\%,6.5G 
  \end{array}\right]
$$

PPL on test set

$$
  \left[\begin{array}{r|r|r|r}
    model & PPL & hit \\\\
    weibo-opengrm-order-3-kn & 115.449 & 1grams: 223 (1.4\%) 2grams: 3707 (22.5\%) 3grams: 12545 (76.1\%) \\\\
    weibo-opengrm-order-3-kn-backoff & 115.347 & 1grams: 223 (1.4\%) 2grams: 3707 (22.5\%) 3grams: 12545 (76.1\%)  \\\\
    weibo-opengrm-order-3-kn-prune-1.0e-7 & 171.056 & 1grams: 1160 (7.0\%) 2grams: 9250 (56.1\%) 3grams: 6065 (36.8\%) \\\\
    weibo-opengrm-order-3-kn-backoff-prune-1.0e-7 & 177.263 & 1grams: 1532 (9.3\%) 2grams: 9145 (55.5\%) 3grams: 5798 (35.2\%)
  \end{array}\right]
$$

We see that the `weibo-opengrm-order-3-kn-ppl` has almost the same ppl as `3-kn-inter-gtall1` in SRILM. Now we need to find out **how to achieve SRILM's `-gt2min 2 -gt3min 3` in OpenGrm**.


</textarea>



<div id="preview"> </div>

<script type="text/x-mathjax-config">
  MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}});
</script>
<script type="text/javascript" src="../lib/MathJax-master/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>
<!--
<script type="text/javascript"
   src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
-->

<script src="../lib/markdown-js/markdown.js"></script>
<script>
  function Editor(input, preview) {
    this.update = function () {
      preview.innerHTML = markdown.toHTML(input.value);
    };
    input.editor = this;
    this.update();
  }
  var $ = function (id) { return document.getElementById(id); };
  new Editor($("text-input"), $("preview"));
</script>


</body>
</html>
