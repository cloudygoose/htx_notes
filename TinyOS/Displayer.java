import java.util.*;
import java.io.*;
public class Displayer {
    public Displayer() {
    }
    public static void skipLines(int kk) {
	//I found that this method turns out to be useless
	String s;
	try {
	    while (true && kk > 0) {
		s = br.readLine();
		if (s != null) {
		    System.out.println(s + "!");
		    kk--;
		}
	    }
	}catch (IOException e) {
	    
	}
    }
    public static void main(String[] args) {
        try {
	    br = new BufferedReader(new InputStreamReader(System.in));
	    String s;
	    while (true) {
		s = br.readLine();
		if (s != null) {
		    System.out.println("raw data :" + s);
		    s = s.replaceAll(" ", "");
		    TemperatureMsg mes = new TemperatureMsg(s.getBytes());
		    System.out.println(mes.toString());
		}
	    }
	}catch (IOException e) {
	    
	}
    }
    static BufferedReader br;
}




/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'TemperatureMsg'
 * message type.
 */
class TemperatureMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 2;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 0;

    /** Create a new TemperatureMsg of size 2. */
    public TemperatureMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new TemperatureMsg of the given data_length. */
    public TemperatureMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TemperatureMsg with the given data_length
     * and base offset.
     */
    public TemperatureMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TemperatureMsg using the given byte array
     * as backing store.
     */
    public TemperatureMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TemperatureMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public TemperatureMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TemperatureMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public TemperatureMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TemperatureMsg embedded in the given message
     * at the given base offset.
     */
    public TemperatureMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new TemperatureMsg embedded in the given message
     * at the given base offset and length.
     */
    public TemperatureMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
	//String s = "Message <TemperatureMsg> \n";
	String s = "";
	try {
	    s += "  [temperature=0x"+Long.toHexString(get_temperature())+"]";
	} catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
	return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: temperature
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'temperature' is signed (false).
     */
    public static boolean isSigned_temperature() {
        return false;
    }

    /**
     * Return whether the field 'temperature' is an array (false).
     */
    public static boolean isArray_temperature() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'temperature'
     */
    public static int offset_temperature() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'temperature'
     */
    public static int offsetBits_temperature() {
        return 8 * 16;
    }

    /**
     * Return the value (as a int) of the field 'temperature'
     */
    public int get_temperature() {
        return (int)getUIntBEElement(offsetBits_temperature(), 16);
    }

    /**
     * Set the value of the field 'temperature'
     */
    public void set_temperature(int value) {
        setUIntBEElement(offsetBits_temperature(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'temperature'
     */
    public static int size_temperature() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'temperature'
     */
    public static int sizeBits_temperature() {
        return 16;
    }

}